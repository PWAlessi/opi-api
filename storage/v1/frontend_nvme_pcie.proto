// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.

syntax = "proto3";
package opi_api.storage.v1;
option go_package = "github.com/opiproject/opi-api/storage/v1";
import "common.proto";
import "uuid.proto";
import "object_key.proto";
import "google/protobuf/empty.proto";

// Front End (host-facing) APIs.

// NVMe/PCIe emulation

service NVMeSubsystemService {
    rpc NVMeSubsystemCreate (NVMeSubsystemCreateRequest) returns (NVMeSubsystem) {}
    rpc NVMeSubsystemDelete (NVMeSubsystemDeleteRequest) returns (google.protobuf.Empty) {}
    rpc NVMeSubsystemUpdate (NVMeSubsystemUpdateRequest) returns (NVMeSubsystem) {}
    rpc NVMeSubsystemGetList   (NVMeSubsystemListRequest)   returns (NVMeSubsystemList)   {}
    rpc NVMeSubsystemGet    (NVMeSubsystemGetRequest)    returns (NVMeSubsystem)    {}
    rpc NVMeSubsystemGetStats  (NVMeSubsystemStatsRequest)  returns (NVMeSubsystemStats)  {}
}

service NVMeControllerService {
    rpc NVMeControllerCreate (NVMeControllerCreateRequest) returns (NVMeController) {}
    rpc NVMeControllerDelete (NVMeControllerDeleteRequest) returns (google.protobuf.Empty) {}
    rpc NVMeControllerUpdate (NVMeControllerUpdateRequest) returns (NVMeController) {}
    rpc NVMeControllerGetList   (NVMeControllerListRequest)   returns (NVMeControllerList)   {}
    rpc NVMeControllerGet    (NVMeControllerGetRequest)    returns (NVMeController)    {}
    rpc NVMeControllerGetStats  (NVMeControllerStatsRequest)  returns (NVMeControllerStats)  {}
}

service NVMeNamespaceService {
    rpc NVMeNamespaceCreate (NVMeNamespaceCreateRequest) returns (NVMeNamespace) {}
    rpc NVMeNamespaceDelete (NVMeNamespaceDeleteRequest) returns (google.protobuf.Empty) {}
    rpc NVMeNamespaceUpdate (NVMeNamespaceUpdateRequest) returns (NVMeNamespace) {}
    rpc NVMeNamespaceGetList   (NVMeNamespaceListRequest)   returns (NVMeNamespaceList)   {}
    rpc NVMeNamespaceGet    (NVMeNamespaceGetRequest)    returns (NVMeNamespace)    {}
    rpc NVMeNamespaceGetStats  (NVMeNamespaceStatsRequest)  returns (NVMeNamespaceStats)  {}
}

message NVMeSubsystem {
    string nqn = 1;
    string serial_number = 2;
    string model_number = 3;
    int64 max_ns = 4;

    // handle is an opaque object handle that is not user settable.
    // handle will be returned with created object
    opi_api.common.v1.ObjectKey handle = 5;
}

message NVMeController {
    int64 id = 1;
    string name = 2;
    common.v1.ObjectKey subsystem_handle = 3;
    NvmeControllerPciId pcie_id = 4;
    int64 max_io_qps = 5;
    int64 max_ns = 6;

    // handle is an opaque object handle that is not user settable.
    // handle will be returned with created object
    common.v1.ObjectKey handle = 7;
}

message NVMeNamespace {
    int64 id = 1;
    string name = 2;
    common.v1.ObjectKey subsystem_handle = 3;
    common.v1.ObjectKey controller_handle = 4;
    int64 nsid = 5;
    string bdev = 6;
    int64 block_size = 7;
    int64 num_blocks = 8;
    string nguid = 9;
    string eui64 = 10;
    common.v1.Uuid uuid = 11;
    string multipath = 12;
    string authentication = 13;

    // handle is an opaque object handle that is not user settable.
    // handle will be returned with created object
    common.v1.ObjectKey handle = 14;
}

message NVMeSubsystemCreateRequest {
    NVMeSubsystem subsystem = 1;
}

message NVMeSubsystemDeleteRequest {
    common.v1.ObjectKey subsystem_handle = 1;
}

message NVMeSubsystemUpdateRequest {
    NVMeSubsystem subsystem = 1;
}

message NVMeSubsystemListRequest {
    // Intentionally empty.
}

message NVMeSubsystemList {
    repeated NVMeSubsystem subsystem = 1;
}

message NVMeSubsystemGetRequest {
    common.v1.ObjectKey subsystem_handle = 1;
}

message NVMeSubsystemStatsRequest {
    common.v1.ObjectKey subsystem_handle = 1;
}

message NVMeSubsystemStats {
    common.v1.ObjectKey subsystem_handle = 1;
    string stats = 2;
}

message NVMeControllerCreateRequest {
    NVMeController controller = 1;
}


message NVMeControllerDeleteRequest {
    common.v1.ObjectKey subsystem_handle = 1;
    common.v1.ObjectKey controller_handle = 2;
}


message NVMeControllerUpdateRequest {
    NVMeController controller = 1;
}


message NVMeControllerListRequest {
    common.v1.ObjectKey subsystem_handle = 1;
}

message NVMeControllerList {
    repeated NVMeController controller = 1;
}

message NVMeControllerGetRequest {
    common.v1.ObjectKey subsystem_handle = 1;
    common.v1.ObjectKey controller_handle = 2;
}

message NVMeControllerStatsRequest {
    common.v1.ObjectKey subsystem_handle = 1;
    common.v1.ObjectKey controller_handle = 2;
}

message NVMeControllerStats {
    common.v1.ObjectKey controller_handle = 1;
    string stats = 2;
}

message NVMeNamespaceCreateRequest {
    NVMeNamespace namespace = 1;
}

message NVMeNamespaceDeleteRequest {
    common.v1.ObjectKey subsystem_handle = 1;
    common.v1.ObjectKey controller_handle = 2;
    common.v1.ObjectKey namespace_handle = 3;
}

message NVMeNamespaceUpdateRequest {
    NVMeNamespace namespace = 1;
}

message NVMeNamespaceListRequest {
    common.v1.ObjectKey subsystem_handle = 1;
    common.v1.ObjectKey controller_handle = 2;
}

message NVMeNamespaceList {
    repeated NVMeNamespace namespace = 1;
}

message NVMeNamespaceGetRequest {
    common.v1.ObjectKey subsystem_handle = 1;
    common.v1.ObjectKey controller_handle = 2;
    common.v1.ObjectKey namespace_handle = 3;
}

message NVMeNamespaceStatsRequest {
    common.v1.ObjectKey subsystem_handle = 1;
    common.v1.ObjectKey controller_handle = 2;
    common.v1.ObjectKey namespace_handle = 3;
}

message NVMeNamespaceStats {
    common.v1.ObjectKey namespace_handle = 1;
    string stats = 2;
}

